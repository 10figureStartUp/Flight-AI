import { Configuration, OpenAIApi } from "openai";

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

export default async function (req, res) {
  if (!configuration.apiKey) {
    res.status(500).json({
      error: {
        message: "OpenAI API key not configured, please follow instructions in README.md",
      },
    });
    return;
  }

  const requestData = req.body;

  if (!requestData) {
    res.status(400).json({
      error: {
        message: "Invalid request data",
      },
    });
    return;
  }

  const {
    fullName,
    email,
    flightType,
    departDate,
    returnDate,
    oneWayDate,
    numFlights,
    multiCityDates,
    originAirport,
    destinationAirport,
    selectedAirports,
    budget,
    airline,
    flightClass,
    seat,
  } = requestData;

  const inputPrompt = `Generate flight itinerary details for the following information:

Full Name: ${fullName || "N/A"}
Email: ${email || "N/A"}
Flight Type: ${flightType || "N/A"}
Departure Date: ${departDate || "N/A"}
Return Date: ${returnDate || "N/A"}
One Way Date: ${oneWayDate || "N/A"}
Number of Flights: ${numFlights || "N/A"}
Multi-City Dates: ${multiCityDates ? multiCityDates.join(",") : "N/A"}
Origin Airport: ${originAirport || "N/A"}
Destination Airport: ${destinationAirport || "N/A"}
Selected Airports: ${selectedAirports ? selectedAirports.join(", ") : "N/A"}
Budget: ${budget ? `$${budget}` : "N/A"}
Airline: ${airline || "N/A"}
Flight Class: ${flightClass || "N/A"}
Seat: ${seat || "N/A"}

Generate a realistic flight itinerary including price, confirmation number, boarding time, take-off time, arrival time (do not include arrival date), and random seat (if necessary), airline (if necessary), and flight class (if necessary).`;

  try {
    const completion = await openai.createCompletion({
      model: "text-davinci-003",
      prompt: inputPrompt,
      temperature: 0.35,
      max_tokens: 3800,
    });
    res.status(200).json({ result: completion.data.choices[0].text });
  } catch (error) {
    if (error.response) {
      console.error(error.response.status, error.response.data);
      res.status(error.response.status).json(error.response.data);
    } else {
      console.error(`Error with OpenAI API request: ${error.message}`);
      res.status(500).json({
        error: {
          message: "An error occurred during your request.",
        },
      });
    }
  }
}
